// Clean, deduplicated, production-optimized Prisma schema for Everhood

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     String           @id @default(cuid())
  name                   String?
  email                  String?          @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  stripeCustomerId       String?          @unique
  stripeSubscriptionId   String?
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  subscriptionStatus     String           @default("free")
  subscriptionTier       SubscriptionTier @default(FREE)
  trialEndsAt            DateTime?
  xp                     Int              @default(0)
  level                  Int              @default(1)
  streak                 Int              @default(0)
  lastActiveDate         DateTime?
  persona                String           @default("ZenGPT")
  dailyProgress          Int              @default(0)
  weeklyGoal             Int              @default(5)
  articlesRead           Int              @default(0)
  summariesUsed          Int              @default(0)
  sharesCount            Int              @default(0)
  profileSpotlightEndsAt DateTime?

  posts                  Post[]
  comments               Comment[]
  likes                  Like[]
  favorites              Favorite[]
  commentLikes           CommentLike[]
  commentDislikes        CommentDislike[]
  userAchievements       UserAchievement[]
  accounts               Account[]
  sessions               Session[]
  sentFriendRequests     Friendship[]       @relation("SentRequests")
  receivedFriendRequests Friendship[]       @relation("ReceivedRequests")
  ownedCircles           Circle[]
  circleMemberships      CircleMembership[]
  votes                  Vote[]
  activities             UserActivity[]
  customPersonas         CustomPersona[]
  apiKeys                ApiKey[]

  company      Company?
  applications JobApplication[]

  following User[]     @relation("UserFollows")
  followers User[]     @relation("UserFollows")
  postLikes PostLike[]

  @@map("users")
}

enum SubscriptionTier {
  FREE
  PREMIUM
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Article {
  id            String   @id @default(cuid())
  url           String   @unique
  title         String
  description   String?
  content       String?
  sourceName    String
  imageUrl      String?
  publishedAt   DateTime
  likeCount     Int      @default(0)
  shares        Int      @default(0)
  category      String?
  tags          String[] @default([])
  createdAt     DateTime @default(now())
  favoriteCount Int      @default(0)

  likes     Like[]
  favorites Favorite[]
  posts     Post[]

  @@index([category])
  @@index([publishedAt])
  @@map("articles")
}

model Post {
  id                String     @id @default(cuid())
  title             String?    @default("Untitled Post") // Now optional
  content           String
  createdAt         DateTime   @default(now())
  author            User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId          String
  originalArticle   Article?   @relation(fields: [originalArticleId], references: [id], onDelete: Cascade)
  originalArticleId String?
  comments          Comment[]
  poll              Poll?
  // Advanced post types
  type              PostType   @default(TEXT)
  metadata          Json?
  resharedCount     Int        @default(0)
  resharedFrom      Post?      @relation("Reshare", fields: [resharedFromId], references: [id])
  resharedFromId    String?
  resharedBy        Post[]     @relation("Reshare")
  likeCount         Int        @default(0) // For fast popular sorting
  likes             PostLike[]
  mediaUrls         String[]   @default([])

  @@index([authorId])
  @@index([originalArticleId])
  @@index([createdAt])
  @@index([likeCount])
}

model PostLike {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())

  @@id([userId, postId])
  @@index([postId])
}

enum PostType {
  TEXT
  POLL
  LINK
  PREDICTION
}

model Friendship {
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  requester   User     @relation("SentRequests", fields: [requesterId], references: [id])
  requesterId String
  receiver    User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
  receiverId  String
  isFavorite  Boolean  @default(false)

  @@id([requesterId, receiverId])
  @@index([requesterId])
  @@index([receiverId])
  @@index([status])
}

model Like {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String

  @@id([userId, articleId])
  @@index([articleId])
}

model Favorite {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  createdAt DateTime @default(now())

  @@id([userId, articleId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String

  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  likes    CommentLike[]
  dislikes CommentDislike[]

  @@index([postId])
}

model CommentLike {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@id([userId, commentId])
}

model CommentDislike {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@id([userId, commentId])
}

model Achievement {
  id          String @id @default(cuid())
  name        String
  description String
  icon        String
  xpReward    Int

  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id       String   @id @default(cuid())
  earnedAt DateTime @default(now())

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId String

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Circle {
  id      String             @id @default(cuid())
  name    String
  owner   User               @relation(fields: [ownerId], references: [id])
  ownerId String
  members CircleMembership[]
}

model CircleMembership {
  circle   Circle @relation(fields: [circleId], references: [id])
  circleId String
  user     User   @relation(fields: [userId], references: [id])
  userId   String

  @@id([circleId, userId])
}

model UserActivity {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  action     String
  entityType String?
  entityId   String?
  metadata   Json?
  createdAt  DateTime @default(now())
}

model Poll {
  id       String       @id @default(cuid())
  question String
  post     Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String       @unique
  options  PollOption[]
}

model PollOption {
  id     String @id @default(cuid())
  text   String
  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String
  votes  Vote[]
}

model Vote {
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@id([userId, pollOptionId])
}

model CustomPersona {
  id        String   @id @default(cuid())
  name      String
  prompt    String   @db.Text // The custom instructions for the AI
  icon      String? // An emoji or icon character
  createdAt DateTime @default(now())

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  @@index([ownerId])
}

model Company {
  id          String  @id @default(cuid())
  name        String
  description String  @db.Text
  websiteUrl  String?
  logoUrl     String?

  jobs    Job[]
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @unique
}

model Job {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  location    String
  type        String
  salaryRange String?
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  applications JobApplication[]

  @@index([companyId])
}

model JobApplication {
  id        String   @id @default(cuid())
  status    String   @default("SUBMITTED")
  appliedAt DateTime @default(now())

  applicant   User   @relation(fields: [applicantId], references: [id])
  applicantId String

  job   Job    @relation(fields: [jobId], references: [id])
  jobId String

  @@unique([applicantId, jobId])
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}
