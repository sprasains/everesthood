// This is your full, final schema
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// AUTH MODELS
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// APP MODELS
model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  stripeCustomerId   String?   @unique
  subscriptionStatus String    @default("free")
  trialEndsAt        DateTime?

  // Gamification
  xp                 Int       @default(0)
  level              Int       @default(1)
  streak             Int       @default(0)
  lastActiveDate     DateTime?
  persona            String    @default("ZenGPT")
  dailyProgress      Int       @default(0)
  weeklyGoal         Int       @default(5)

  // Social & Content
  posts              Post[]
  comments           Comment[]
  likes              Like[]
  commentLikes       CommentLike[]
  favorites          Favorite[]
  userAchievements   UserAchievement[]
  accounts           Account[]
  sessions           Session[]
  commentDislikes    CommentDislike[]

  // New Friendship Relations
  sentFriendRequests     Friendship[] @relation("SentRequests")
  receivedFriendRequests Friendship[] @relation("ReceivedRequests")

  // New Circle Relations
  ownedCircles       Circle[]
  circleMemberships  CircleMembership[]

  @@map("users")
}

model Article {
  id                 String     @id @default(cuid())
  url                String     @unique
  title              String
  description        String?
  content            String?
  sourceName         String
  imageUrl           String?
  publishedAt        DateTime
  likeCount          Int        @default(0)
  shares             Int        @default(0)
  category           String?
  tags               String[]   @default([])
  createdAt          DateTime   @default(now())
  favoriteCount      Int        @default(0)

  // Relations
  likes              Like[]
  favorites          Favorite[]
  posts              Post[]

  @@map("articles")
}

model Post {
  id                String    @id @default(cuid())
  content           String
  createdAt         DateTime  @default(now())

  author            User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId          String

  // Link to an original article if it's a repost
  originalArticle   Article?  @relation(fields: [originalArticleId], references: [id], onDelete: Cascade)
  originalArticleId String?

  comments          Comment[]
}

model Like {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String

  @@id([userId, articleId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  parentId  String?  // For threaded replies
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")

  likes     CommentLike[]
  dislikes  CommentDislike[]
}

model CommentLike {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@id([userId, commentId])
}

model CommentDislike {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@id([userId, commentId])
}

model Favorite {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String

  @@id([userId, articleId])
}

// GAMIFICATION MODELS
model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  xpReward    Int
  
  userAchievements UserAchievement[]
  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  earnedAt      DateTime    @default(now())
  
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId String
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Friendship {
  status    String   // PENDING, ACCEPTED, DECLINED, BLOCKED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  requester User @relation("SentRequests", fields: [requesterId], references: [id])
  requesterId String

  receiver  User @relation("ReceivedRequests", fields: [receiverId], references: [id])
  receiverId String
  
  // Is this friend a "favorite"?
  isFavorite Boolean @default(false)

  @@id([requesterId, receiverId])
}

model Circle {
  id      String @id @default(cuid())
  name    String
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String
  
  members CircleMembership[]
}

model CircleMembership {
  circle   Circle @relation(fields: [circleId], references: [id])
  circleId String
  user     User   @relation(fields: [userId], references: [id])
  userId   String

  @@id([circleId, userId])
}