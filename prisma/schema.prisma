// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  stripeCustomerId   String?   @unique
  subscriptionStatus String    @default("free")
  trialEndsAt        DateTime?
  createdAt          DateTime  @default(now())

  // Gamification fields
  xp                 Int       @default(0)
  level              Int       @default(1)
  streak             Int       @default(0)
  lastActiveDate     DateTime?
  persona            String    @default("ZenGPT")
  dailyProgress      Int       @default(0)
  weeklyGoal         Int       @default(5)
  achievements       String[]  @default([])

  // Social features
  friends            String[]  @default([])
  publicProfile      Boolean   @default(true)

  // Analytics
  articlesRead       Int       @default(0)
  summariesUsed      Int       @default(0)
  sharesCount        Int       @default(0)

  accounts           Account[]
  sessions           Session[]
  userAchievements   UserAchievement[]
  posts              Post[]
  likes              Like[]    // <-- Add this line

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String?
  sourceName  String
  imageUrl    String?
  publishedAt DateTime
  url         String   @unique
  createdAt   DateTime @default(now())

  // Engagement metrics
  views       Int      @default(0)
  likeCount   Int      @default(0) // <-- Rename this field from "likes"
  shares      Int      @default(0)

  // Categorization
  category    String?
  tags        String[] @default([])

  likes       Like[]   // <-- Add this line

  @@map("articles")
}

model GenZContent {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String?
  sourceName  String   // hypebeast, thetab, dazed, nylon, etc.
  sourceUrl   String   @unique
  imageUrl    String?
  publishedAt DateTime
  createdAt   DateTime @default(now())

  // Content metadata
  category    String   // fashion, culture, tech, lifestyle
  tags        String[] @default([])
  engagement  Int      @default(0)

  @@map("genz_content")
}

model Achievement {
  id           String   @id @default(cuid())
  name         String
  description  String
  icon         String
  xpReward     Int
  rarity       String   // common, rare, epic, legendary
  category     String   // reading, social, streak, exploration
  requirements Json     // flexible requirements structure
  createdAt    DateTime @default(now())

  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model UserActivity {
  id          String   @id @default(cuid())
  userId      String
  action      String   // read_article, use_summary, share, etc.
  entityType  String?  // article, achievement, etc.
  entityId    String?
  metadata    Json?    // additional data about the action
  createdAt   DateTime @default(now())

  @@map("user_activities")
}

model Post {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
}

model Like {
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String

  @@id([userId, articleId])
}