// Everesthood Agent Marketplace - Production-Grade Prisma Schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ORG_ADMIN
  SUPER_ADMIN
}

enum AgentRunStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  AWAITING_INPUT
}

enum AgentVisibility {
  PRIVATE
  ORG
  PUBLIC
}

enum BillingStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  orgId         String?
  role          UserRole @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?
  agentInstances AgentInstance[]
  billingAccount BillingAccount?
  agentCredentials AgentCredential[]
}

model AgentTemplate {
  id             String   @id @default(cuid())
  name           String   @unique
  description    String
  version        Int      @default(1)
  category       String?
  defaultPrompt  String
  defaultModel   String   @default("gpt-4o")
  defaultTools   Json?
  defaultConfig  Json?
  isPublic       Boolean  @default(true)
  orgId          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?
  agentInstances AgentInstance[]
  steps         Json?    // Multi-step config, array of steps
  credentials   Json?    // Credential requirements/types
  health        Json?    // Health/resource status
  jobQueue      Json?    // Job queue info, DLQ status

  @@index([orgId])
  @@unique([name, orgId], name: "unique_template_per_org")
  @@index([deletedAt])
}

model AgentInstance {
  id             String   @id @default(cuid())
  userId         String
  templateId     String
  name           String
  configOverride Json?
  status         String   @default("ACTIVE")
  visibility     AgentVisibility @default(PRIVATE)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?
  agentRuns      AgentRun[]
  agentCredentials AgentCredential[]
  user           User     @relation(fields: [userId], references: [id])
  template       AgentTemplate @relation(fields: [templateId], references: [id])

  @@index([userId])
  @@index([templateId])
  @@index([deletedAt])
}

model AgentCredential {
  id             String   @id @default(cuid())
  userId         String
  agentInstanceId String
  provider       String
  secretId       String
  rotatedAt      DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
  agentInstance  AgentInstance @relation(fields: [agentInstanceId], references: [id])
  secret         Secret   @relation(fields: [secretId], references: [id])

  @@index([provider])
  @@index([secretId])
  @@unique([userId, agentInstanceId, provider], name: "unique_cred_per_user_agent")
}

model Secret {
  id             String   @id @default(cuid())
  encryptedBlob  Bytes
  kmsKeyId       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  agentCredentials AgentCredential[]
}

model AgentRun {
  id              String   @id @default(cuid())
  userId          String
  agentInstanceId String
  status          String
  tokensUsed      Int?
  cost            Float?
  startedAt       DateTime @default(now())
  finishedAt      DateTime?
  steps           AgentRunStep[]
  agentInstance   AgentInstance @relation(fields: [agentInstanceId], references: [id])
  events          AgentEvent[]
}

model AgentRunStep {
  id         String   @id @default(cuid())
  runId      String
  index      Int
  name       String
  input      Json
  output     Json?
  error      String?
  startedAt  DateTime @default(now())
  finishedAt DateTime?
  AgentRun   AgentRun @relation(fields: [runId], references: [id])
}

model AgentEvent {
  id             String   @id @default(cuid())
  agentRunId     String
  eventType      String
  payload        Json?
  createdAt      DateTime @default(now())
  agentRun       AgentRun @relation(fields: [agentRunId], references: [id])
}

model UsageMeter {
  id             String   @id @default(cuid())
  userId         String?
  orgId          String?
  model          String?
  tool           String?
  agentId        String?
  count          Int      @default(0)
  periodStart    DateTime
  periodEnd      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([periodStart, periodEnd])
}

model BillingAccount {
  id             String   @id @default(cuid())
  userId         String? @unique
  orgId          String?
  stripeCustomerId String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  invoices       Invoice[]
  user           User?    @relation(fields: [userId], references: [id])
}

model Invoice {
  id             String   @id @default(cuid())
  billingAccountId String
  stripeInvoiceId String?
  status         BillingStatus @default(PENDING)
  amount         Float
  currency       String
  issuedAt       DateTime @default(now())
  paidAt         DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  charges        Charge[]
  billingAccount BillingAccount @relation(fields: [billingAccountId], references: [id])
}

model Charge {
  id             String   @id @default(cuid())
  invoiceId      String
  stripeChargeId String?
  amount         Float
  currency       String
  status         BillingStatus @default(PENDING)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  invoice        Invoice  @relation(fields: [invoiceId], references: [id])
}

model FeatureFlag {
  id             String   @id @default(cuid())
  name           String   @unique
  enabled        Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model AuditLog {
  id             String   @id @default(cuid())
  userId         String?
  orgId          String?
  action         String
  targetId       String?
  details        Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}